#include <msp430.h>


 int main(void){

    WDTCTL = WDTPW | WDTHOLD;   // Stops watchdog timer
    PM5CTL0 &= ~LOCKLPM5;         //Enable GPIO

    P1DIR |= BIT0;              // Set P1.0 direction to output
    P4DIR |= BIT7;              // Set P4.7 direction to output
    P1DIR &= ~BIT1;                      //set P1.3 direction to input
    P1REN |= BIT1;                       //enable resistor on P1.1 
    P1OUT |= BIT1;                       //set resistor to pull up
    P1IE |= BIT1;                       //enable interrupt on P1.1
    P1IES |= BIT1;                      //Set interrupt from high to low
    P1IFG &= ~BIT1;                     //Clear interrupt flags

       
    TB0CTL = TBSSEL_2 + MC_1;          // SMCLK, Up Mode
    TB0CCR0 = 1000;                         // set max PWM to 1000 clock cycles. So when TB1CCR1 = 1000 the DutyCycle = 100%.
    TB0CCR1 = 0;                         // set duty cycle to 0%
    TB0CCTL1 = OUTMOD_7;                   // set timer to Set/Reset mode


    __enable_interrupt(); // enable interrupts

}


//button interrupt
#pragma vector=PORT1_VECTOR         //Interrupt when Button is pressed
__interrupt void Port_1(void)
{
    P1IE &= ~BIT1;                          //Disable interrupt on P1.1 (BUTTON)
    if((P1IN & BIT1)==0){
            if (TB0CCR1<1000)              //Checks to see if below max PWM
                TB0CCR1+=100;               //increment duty cycle by 10%
             else
                TB0CCR1 = 0;                //Reset duty cycle to 0
    }
           P1OUT ^= BIT0;                   //Toggle P1.0
          __delay_cycles(5000);             //Delay cycles to prevent button bouncing
           P1IE |= BIT1;
           //Enable interrupt on P1.1
           P1IFG &= ~BIT1;                  //clear flags
}
