#include <msp430.h>


int main(void)
{
    
    WDTCTL = WDTPW | WDTHOLD;           // stop WDT
    P1DIR |= BIT0;                      // P1.0  output
    P1DIR |= BIT6;                       //P1.6 output
    P1SEL |= BIT6;                       //Port 1 output
    P1DIR &= ~BIT3;                      //P1.3 direction input button
    P1REN |= BIT3;                       //enable resistor P1.3
    P1OUT |= BIT3;                       //pull up resistor 
    P1IE |= BIT3;                       //enable interrupt 
    P1IES |= BIT3;                      //set interrupt edge
    P1IFG &= ~BIT3;                     //clear interrupt flags

    TA0CTL = TASSEL_2 + MC_1 + ID_1;            //TImer, SMCLK, up mode
        TA0CCR0 = 1000;                         //set period
        TA0CCR1 = 100;                         //set duty cycle to 10%
        TA0CCTL1 = OUTMOD_7;                   //Timer set/reset mode
  
        __bis_SR_register(GIE);              // LPM0 with general interrupts enabled
    while(1);
}


#pragma vector=PORT1_VECTOR
__interrupt void Port_1(void)
{
   if(P1IES & BIT3){
            if (TA0CCR1<1000) {             //if duty cycle not at 100% 
                TA0CCR1+=100;               //increment duty cycle by 10%
            } else if (TA0CCR1 >=1000) {    //if the duty cycle at 100%
                TA0CCR1 = 0;                //reset duty cycle
            }
    }
           P1IES ^= BIT3;                   //toggle interrupt edge
           P1OUT ^= BIT0;                   //toggle LED 
           P1IFG &= ~BIT3;                  //clear interrupt flags
}
